
# The objective of this assignment is to use Monte Carlo simulation to assess
# the risks and rewards associated with various expansion strategies for the cafÂ´e
# chain. You will evaluate the performance of different strategies and determine
# the best one based on net present value (NPV), payback period, and return on
# investment (ROI).

# The following probability distributions will be used to model the uncertainty in
# the data:
# 1. Initial investment: Triangular distribution with min, max, and most likely
# values provided for each location
# 2. Monthly operating costs: Normal distribution with mean and standard
# deviation provided for each location
# 3. Monthly foot traffic: Poisson distribution with mean provided for each
# location
# 4. Average spend per customer: Lognormal distribution with mean and standard deviation provided for each location
# load the data from the file stored in the github repository

# Load and format data
git <- "https://raw.githubusercontent.com/cld3033/"
path <- "Sim.-Optimization-Case-Studies/main/"
file <- "Case4_distParameters%20(1).csv"

df <- read.csv(paste0(git, path, file))
rownames(df) <- df[,1]
df <- df[, 2:9]
colnames(df) <- c("Initial_Investment_min",
                  "Initial_Investment_most_likely",
                  "Initial_Investment_max",
                  "Monthly_Operating_Cost_mean",
                  "Monthly_Operating_Cost_std",
                  "Monthly_Foot_Traffic_mean",
                  "Average_Spend_per_Customer_mean",
                  "Average_Spend_per_Customer_std")



set.seed(124)

discountRate = 0.1
footTrafficGrowth = 0
avgSpendGrowth = 0

num_sim = 1000

year = 3

# marketsize can be thought of as foot traffic and market share can be thought of as average spend per customer
# define annual profit 
# ((monthly foot traffic * average spend per customer) - monthly operating costs)*12

# Create funciton for monthly revenue 
monthlyRevenue <- function(footTraffic, avgSpend){
  return(footTraffic*avgSpend)
}

# Create function for monthly net cash value
monthlyNetCashVal <- function(monthlyRevenue, monthlyCost){
  return(monthlyRevenue - monthlyCost)
}

# Create function for annual profit 
AnnualProfit <- function(year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost){
  footTraffic = footTraffic*(1 + footTrafficGrowth)^(year -1)
  avgSpend = avgSpend*(1 + avgSpendGrowth)^(year - 1)
  sale = footTraffic*avgSpend
  annualRevenue = 12*sale
  annualCost = 12*monthlyCost
  return(annualRevenue - annualCost)
}

# Create net peresent profit function
netPresentProfit <- function(discountRate, profit, year){
  netProfit <- 0
  for (t in 1:year){
    netProfit <- netProfit + profit[t]/(1+discountRate)^t
  }
  return(netProfit)
}

################# Location A #################################
library(triangle)
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- c()
simulated_npv <- c()
for (i in 1:num_sim){
  # Set stochastic variables
  monthlyCost = rnorm(1, mean = df["A", "Monthly_Operating_Cost_mean"], 
                      sd = df["A", "Monthly_Operating_Cost_std"])
  
  footTraffic = rpois(1, lambda = df["A", "Monthly_Foot_Traffic_mean"])
  
  avgSpend = rlnorm(1, meanlog = df["A", "Average_Spend_per_Customer_mean"], 
                    sdlog = df["A", "Average_Spend_per_Customer_std"])
  
  # Project Cost 
  initialInvestment = rtriangle(1, a = df["A", "Initial_Investment_min"], 
                                b = df["A", "Initial_Investment_max"], 
                                c = df["A", "Initial_Investment_most_likely"])
  
  monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
  simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
  
  monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
  simulated_monthly_net_cash <- c(simulated_monthly_net_cash, monthlyNetCashVa)
  
  profit <- AnnualProfit(1:year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost)
  
  npvProfit <- netPresentProfit(discountRate, profit, year)
  
  npv = npvProfit - initialInvestment
  
  simulated_npv <- c(simulated_npv, npv)
}


