# The objective of this assignment is to use Monte Carlo simulation to assess
# the risks and rewards associated with various expansion strategies for the cafÂ´e
# chain. You will evaluate the performance of different strategies and determine
# the best one based on net present value (NPV), payback period, and return on
# investment (ROI).

# The following probability distributions will be used to model the uncertainty in
# the data:
# 1. Initial investment: Triangular distribution with min, max, and most likely
# values provided for each location
# 2. Monthly operating costs: Normal distribution with mean and standard
# deviation provided for each location
# 3. Monthly foot traffic: Poisson distribution with mean provided for each
# location
# 4. Average spend per customer: Lognormal distribution with mean and standard deviation provided for each location
# load the data from the file stored in the github repository

# Load and format data
git <- "https://raw.githubusercontent.com/cld3033/"
path <- "Sim.-Optimization-Case-Studies/main/"
file <- "Case4_distParameters%20(1).csv"

df <- read.csv(paste0(git, path, file))
rownames(df) <- df[,1]
df <- df[, 2:9]
colnames(df) <- c("Initial_Investment_min",
                  "Initial_Investment_most_likely",
                  "Initial_Investment_max",
                  "Monthly_Operating_Cost_mean",
                  "Monthly_Operating_Cost_std",
                  "Monthly_Foot_Traffic_mean",
                  "Average_Spend_per_Customer_mean",
                  "Average_Spend_per_Customer_std")



set.seed(123)

discountRate = 0.1
footTrafficGrowth = 0
avgSpendGrowth = 0

num_sim = 1000

year = 3
month = 12

# Create function for log mean
logMean <- function(mean, sd){
  return(log(mean) - 1/2*(log((sd/mean)^2 + 1)))
}

# Create function for log sd
logSd <- function(mean, sd){
  return(sqrt(log((sd/mean)^2 + 1)))
}

# marketsize can be thought of as foot traffic and market share can be thought of as average spend per customer
# define annual profit 
# ((monthly foot traffic * average spend per customer) - monthly operating costs)*12

# Create funciton for monthly revenue 
monthlyRevenue <- function(footTraffic, avgSpend){
  return(footTraffic*avgSpend)
}

# Create function for monthly net cash value
monthlyNetCashVal <- function(monthlyRevenue, monthlyCost){
  return(monthlyRevenue - monthlyCost)
}

# Create function for annual profit 
AnnualProfit <- function(year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost){
  footTraffic = footTraffic*(1 + footTrafficGrowth)^(year -1)
  avgSpend = avgSpend*(1 + avgSpendGrowth)^(year - 1)
  sale = footTraffic*avgSpend
  annualRevenue = 12*sale
  annualCost = 12*monthlyCost
  return(annualRevenue - annualCost)
}

# Create net peresent profit function
netPresentProfit <- function(discountRate, profit, year){
  netProfit <- 0
  for (t in 1:year){
    netProfit <- netProfit + profit[t]/(1+discountRate)^t
  }
  return(netProfit)
}

############################ Location A ########################################
library(triangle)
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- c()
simulated_npv <- c()
simulated_ROI <- c()
cumProfitMatrix <- matrix(0, nrow = num_sim, ncol = year)
for (i in 1:num_sim){
  # Set stochastic variables
  monthlyCost = rnorm(1, mean = df["A", "Monthly_Operating_Cost_mean"], 
                      sd = df["A", "Monthly_Operating_Cost_std"])
  
  footTraffic = rpois(1, lambda = df["A", "Monthly_Foot_Traffic_mean"])
  
  # convert mean of average spend per csutomer to log mean
  avgSpendMean <- logMean(df["A", "Average_Spend_per_Customer_mean"], df["A", "Average_Spend_per_Customer_std"])
  avgSpendSd <- logSd(df["A", "Average_Spend_per_Customer_mean"], df["A", "Average_Spend_per_Customer_std"])
  avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                    sdlog = avgSpendSd)
  
  # Project Cost 
  initialInvestment = rtriangle(1, a = df["A", "Initial_Investment_min"], 
                                b = df["A", "Initial_Investment_max"], 
                                c = df["A", "Initial_Investment_most_likely"])
  
  monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
  simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
  
  monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
  simulated_monthly_net_cash <- c(simulated_monthly_net_cash, monthlyNetCashVa)
  
  profit <- AnnualProfit(1:year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost)
  
  cumProfit <- cumsum(profit) - initialInvestment
  
  ROI <- (cumProfit[3]/initialInvestment)*100
  simulated_ROI <- c(simulated_ROI, ROI)
  
  for (t in 1:year){
    cumProfitMatrix[i, t] = cumProfit[t]
  }
  
  npvProfit <- netPresentProfit(discountRate, profit, year)
  
  npv = npvProfit - initialInvestment
  
  simulated_npv <- c(simulated_npv, npv)
}

# Task 1 is done implicitly and shown via relabeling of the dataframe and 
# setting up of the probability distributions for each stochastic variable

# Task 2: A monte carlo simulation is created 
# The expected value for monthly revenue is:
mean(simulated_monthly_Revenue) # $35,691.81
quantile(simulated_monthly_Revenue, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $23,918.29 
# and an upper bound of $50,436.68 

# expected value for monthly net cash flow is:
mean(simulated_monthly_net_cash) # $20,708.01
quantile(simulated_monthly_net_cash, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $8,512.059
# and an upper bound of $35,264.915 


# Task 3:
# The net present value for location A after 3 years 
mean(simulated_npv) # $443,119.10
quantile(simulated_npv, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $84,564.47
# and an upper bound of $888,065.18   

# Task 4:
# Based on 1000 simulations, location A is able to recover the cost of the
# initial investment and return a profit within the first year.
colMeans(cumProfitMatrix)

# Task 5:
mean(simulated_ROI) # ROI is already in percent format
quantile(simulated_ROI, c(0.025, 0.975))

# Break down by pay back period by month to see the exact month that it is
# paid off after opening
set.seed(123)
num_profits <- num_sim * month
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- matrix(0, nrow = num_sim, ncol = month)
cumMonthlyProfitMatrix <- matrix(0, nrow = num_sim, ncol = month)
for (i in  1:num_sim){
  for(t in 1:month){
    monthlyCost = rnorm(1, mean = df["A", "Monthly_Operating_Cost_mean"], 
                        sd = df["A", "Monthly_Operating_Cost_std"])
    
    footTraffic = rpois(1, lambda = df["A", "Monthly_Foot_Traffic_mean"])
    
    # convert mean of average spend per csutomer to log mean
    avgSpendMean <- logMean(df["A", "Average_Spend_per_Customer_mean"], df["A", "Average_Spend_per_Customer_std"])
    avgSpendSd <- logSd(df["A", "Average_Spend_per_Customer_mean"], df["A", "Average_Spend_per_Customer_std"])
    avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                      sdlog = avgSpendSd)
    # Project Cost 
    initialInvestment = rtriangle(1, a = df["A", "Initial_Investment_min"], 
                                  b = df["A", "Initial_Investment_max"], 
                                  c = df["A", "Initial_Investment_most_likely"])
    
    monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
    simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
    
    monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
    simulated_monthly_net_cash[i,t] <- monthlyNetCashVa
    
    cumMonthlyProfit <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
    #cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
  }
  cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
}

cumMonthlyProfitMatrix[1, ]
cumsum(simulated_monthly_net_cash[1, ]) - initialInvestment
# Not sure why these aren't equal

colMeans(cumMonthlyProfitMatrix)
# The expected pay of period when breaking down cumulative profit by month
# using 1000 simulations is month 9.

############################ Location B ########################################
set.seed(123)
library(triangle)
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- c()
simulated_npv <- c()
simulated_ROI <- c()
cumProfitMatrix <- matrix(0, nrow = num_sim, ncol = year)
for (i in 1:num_sim){
  # Set stochastic variables
  monthlyCost = rnorm(1, mean = df["B", "Monthly_Operating_Cost_mean"], 
                      sd = df["B", "Monthly_Operating_Cost_std"])
  
  footTraffic = rpois(1, lambda = df["B", "Monthly_Foot_Traffic_mean"])
  
  # convert mean of average spend per csutomer to log mean
  avgSpendMean <- logMean(df["B", "Average_Spend_per_Customer_mean"], df["B", "Average_Spend_per_Customer_std"])
  avgSpendSd <- logSd(df["B", "Average_Spend_per_Customer_mean"], df["B", "Average_Spend_per_Customer_std"])
  avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                    sdlog = avgSpendSd)
  
  # Project Cost 
  initialInvestment = rtriangle(1, a = df["B", "Initial_Investment_min"], 
                                b = df["B", "Initial_Investment_max"], 
                                c = df["B", "Initial_Investment_most_likely"])
  
  monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
  simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
  
  monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
  simulated_monthly_net_cash <- c(simulated_monthly_net_cash, monthlyNetCashVa)
  
  profit <- AnnualProfit(1:year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost)
  
  cumProfit <- cumsum(profit) - initialInvestment
  
  ROI <- (cumProfit[3]/initialInvestment)*100
  simulated_ROI <- c(simulated_ROI, ROI)
  
  for (t in 1:year){
    cumProfitMatrix[i, t] = cumProfit[t]
  }
  
  npvProfit <- netPresentProfit(discountRate, profit, year)
  
  npv = npvProfit - initialInvestment
  
  simulated_npv <- c(simulated_npv, npv)
}

# Task 1 is done implicitly and shown via relabeling of the dataframe and 
# setting up of the probability distributions for each stochastic variable

# Task 2: A monte carlo simulation is created 
# The expected value for monthly revenue is:
mean(simulated_monthly_Revenue) # $34,655.73
quantile(simulated_monthly_Revenue, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $22,171.86
# and an upper bound of $50,012.07 

# expected value for monthly net cash flow is:
mean(simulated_monthly_net_cash) # $22,668.54
quantile(simulated_monthly_net_cash, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $10,194.20
# and an upper bound of $37,731.91


# Task 3:
# The net present value for location A after 3 years 
mean(simulated_npv) # $536,577.50
quantile(simulated_npv, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $165,448.3
# and an upper bound of $994,161.00    

# Task 4:
# Based on 1000 simulations, location A is able to recover the cost of the
# initial investment and return a profit within the first year.
colMeans(cumProfitMatrix)

# Task 5:
mean(simulated_ROI) # ROI is already in percent format
quantile(simulated_ROI, c(0.025, 0.975))

# Break down by pay back period by month to see the exact month that it is
# paid off after opening
set.seed(123)
num_profits <- num_sim * month
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- matrix(0, nrow = num_sim, ncol = month)
cumMonthlyProfitMatrix <- matrix(0, nrow = num_sim, ncol = month)
for (i in  1:num_sim){
  for(t in 1:month){
    monthlyCost = rnorm(1, mean = df["B", "Monthly_Operating_Cost_mean"], 
                        sd = df["B", "Monthly_Operating_Cost_std"])
    
    footTraffic = rpois(1, lambda = df["B", "Monthly_Foot_Traffic_mean"])
    
    # convert mean of average spend per csutomer to log mean
    avgSpendMean <- logMean(df["B", "Average_Spend_per_Customer_mean"], df["B", "Average_Spend_per_Customer_std"])
    avgSpendSd <- logSd(df["B", "Average_Spend_per_Customer_mean"], df["B", "Average_Spend_per_Customer_std"])
    avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                      sdlog = avgSpendSd)
    # Project Cost 
    initialInvestment = rtriangle(1, a = df["B", "Initial_Investment_min"], 
                                  b = df["B", "Initial_Investment_max"], 
                                  c = df["B", "Initial_Investment_most_likely"])
    
    monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
    simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
    
    monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
    simulated_monthly_net_cash[i,t] <- monthlyNetCashVa
    
    cumMonthlyProfit <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
    #cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
  }
  cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
}

cumMonthlyProfitMatrix[1, ]
cumsum(simulated_monthly_net_cash[1, ]) - initialInvestment
# Not sure why these aren't equal

colMeans(cumMonthlyProfitMatrix)
# The expected pay of period when breaking down cumulative profit by month
# using 1000 simulations is month 7.

############################ Location C ########################################
set.seed(123)
library(triangle)
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- c()
simulated_npv <- c()
simulated_ROI <- c()
cumProfitMatrix <- matrix(0, nrow = num_sim, ncol = year)
for (i in 1:num_sim){
  # Set stochastic variables
  monthlyCost = rnorm(1, mean = df["C", "Monthly_Operating_Cost_mean"], 
                      sd = df["C", "Monthly_Operating_Cost_std"])
  
  footTraffic = rpois(1, lambda = df["C", "Monthly_Foot_Traffic_mean"])
  
  # convert mean of average spend per csutomer to log mean
  avgSpendMean <- logMean(df["C", "Average_Spend_per_Customer_mean"], df["C", "Average_Spend_per_Customer_std"])
  avgSpendSd <- logSd(df["C", "Average_Spend_per_Customer_mean"], df["C", "Average_Spend_per_Customer_std"])
  avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                    sdlog = avgSpendSd)
  
  # Project Cost 
  initialInvestment = rtriangle(1, a = df["C", "Initial_Investment_min"], 
                                b = df["C", "Initial_Investment_max"], 
                                c = df["C", "Initial_Investment_most_likely"])
  
  monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
  simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
  
  monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
  simulated_monthly_net_cash <- c(simulated_monthly_net_cash, monthlyNetCashVa)
  
  profit <- AnnualProfit(1:year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost)
  
  cumProfit <- cumsum(profit) - initialInvestment
  
  ROI <- (cumProfit[3]/initialInvestment)*100
  simulated_ROI <- c(simulated_ROI, ROI)
  
  for (t in 1:year){
    cumProfitMatrix[i, t] = cumProfit[t]
  }
  
  npvProfit <- netPresentProfit(discountRate, profit, year)
  
  npv = npvProfit - initialInvestment
  
  simulated_npv <- c(simulated_npv, npv)
}

# Task 1 is done implicitly and shown via relabeling of the dataframe and 
# setting up of the probability distributions for each stochastic variable

# Task 2: A monte carlo simulation is created 
# The expected value for monthly revenue is:
mean(simulated_monthly_Revenue) # $53,513.65
quantile(simulated_monthly_Revenue, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $35,732.39
# and an upper bound of $75,725.64

# expected value for monthly net cash flow is:
mean(simulated_monthly_net_cash) # $35,531.99
quantile(simulated_monthly_net_cash, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $17,204.70
# and an upper bound of $57,392.61 


# Task 3:
# The net present value for location A after 3 years 
mean(simulated_npv) # $850,467.70
quantile(simulated_npv, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $310,096.40
# and an upper bound of $1,512,303.10 

# Task 4:
# Based on 1000 simulations, location A is able to recover the cost of the
# initial investment and return a profit within the first year.
colMeans(cumProfitMatrix)

# Task 5:
mean(simulated_ROI) # ROI is already in percent format
quantile(simulated_ROI, c(0.025, 0.975))

# Task 7: 
mean(simulated_npv > 0)
mean(simulated_monthly_net_cash > 0)
mean(simulated_monthly_Revenue > 0)
mean(simulated_ROI > 0)

# Break down by pay back period by month to see the exact month that it is
# paid off after opening
set.seed(123)
num_profits <- num_sim * month
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- matrix(0, nrow = num_sim, ncol = month)
cumMonthlyProfitMatrix <- matrix(0, nrow = num_sim, ncol = month)
for (i in  1:num_sim){
  for(t in 1:month){
    monthlyCost = rnorm(1, mean = df["C", "Monthly_Operating_Cost_mean"], 
                        sd = df["C", "Monthly_Operating_Cost_std"])
    
    footTraffic = rpois(1, lambda = df["C", "Monthly_Foot_Traffic_mean"])
    
    # convert mean of average spend per csutomer to log mean
    avgSpendMean <- logMean(df["C", "Average_Spend_per_Customer_mean"], df["C", "Average_Spend_per_Customer_std"])
    avgSpendSd <- logSd(df["C", "Average_Spend_per_Customer_mean"], df["C", "Average_Spend_per_Customer_std"])
    avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                      sdlog = avgSpendSd)
    # Project Cost 
    initialInvestment = rtriangle(1, a = df["C", "Initial_Investment_min"], 
                                  b = df["C", "Initial_Investment_max"], 
                                  c = df["C", "Initial_Investment_most_likely"])
    
    monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
    simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
    
    monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
    simulated_monthly_net_cash[i,t] <- monthlyNetCashVa
    
    cumMonthlyProfit <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
    #cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
  }
  cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
}

cumMonthlyProfitMatrix[1, ]
cumsum(simulated_monthly_net_cash[1, ]) - initialInvestment
# Not sure why these aren't equal

colMeans(cumMonthlyProfitMatrix)
# The expected pay of period when breaking down cumulative profit by month
# using 1000 simulations is month 6.

############################ Location D ########################################
set.seed(123)
library(triangle)
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- c()
simulated_npv <- c()
simulated_ROI <- c()
cumProfitMatrix <- matrix(0, nrow = num_sim, ncol = year)
for (i in 1:num_sim){
  # Set stochastic variables
  monthlyCost = rnorm(1, mean = df["D", "Monthly_Operating_Cost_mean"], 
                      sd = df["D", "Monthly_Operating_Cost_std"])
  
  footTraffic = rpois(1, lambda = df["D", "Monthly_Foot_Traffic_mean"])
  
  # convert mean of average spend per csutomer to log mean
  avgSpendMean <- logMean(df["D", "Average_Spend_per_Customer_mean"], df["D", "Average_Spend_per_Customer_std"])
  avgSpendSd <- logSd(df["D", "Average_Spend_per_Customer_mean"], df["D", "Average_Spend_per_Customer_std"])
  avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                    sdlog = avgSpendSd)
  
  # Project Cost 
  initialInvestment = rtriangle(1, a = df["D", "Initial_Investment_min"], 
                                b = df["D", "Initial_Investment_max"], 
                                c = df["D", "Initial_Investment_most_likely"])
  
  monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
  simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
  
  monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
  simulated_monthly_net_cash <- c(simulated_monthly_net_cash, monthlyNetCashVa)
  
  profit <- AnnualProfit(1:year, footTraffic, footTrafficGrowth, avgSpend, 
                         avgSpendGrowth, monthlyCost)
  
  cumProfit <- cumsum(profit) - initialInvestment
  
  ROI <- (cumProfit[3]/initialInvestment)*100
  simulated_ROI <- c(simulated_ROI, ROI)
  
  for (t in 1:year){
    cumProfitMatrix[i, t] = cumProfit[t]
  }
  
  npvProfit <- netPresentProfit(discountRate, profit, year)
  
  npv = npvProfit - initialInvestment
  
  simulated_npv <- c(simulated_npv, npv)
}

# Task 1 is done implicitly and shown via relabeling of the dataframe and 
# setting up of the probability distributions for each stochastic variable

# Task 2: A monte carlo simulation is created 
# The expected value for monthly revenue is:
mean(simulated_monthly_Revenue) # $30,507.11
quantile(simulated_monthly_Revenue, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $19,491.63
# and an upper bound of $44,166.18

# expected value for monthly net cash flow is:
mean(simulated_monthly_net_cash) # $20,516.88
quantile(simulated_monthly_net_cash, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $9,491.614
# and an upper bound of $33,893.307  


# Task 3:
# The net present value for location A after 3 years 
mean(simulated_npv) # $492,363.50
quantile(simulated_npv, c(0.025, 0.975))
# the 95% confidence interval has a lower bound of $164,234.60
# and an upper bound of $900,261.10 

# Task 4:
# Based on 1000 simulations, location A is able to recover the cost of the
# initial investment and return a profit within the first year.
colMeans(cumProfitMatrix)

# Task 5:
mean(simulated_ROI) # ROI is already in percent format
quantile(simulated_ROI, c(0.025, 0.975))

# Break down by pay back period by month to see the exact month that it is
# paid off after opening
set.seed(123)
num_profits <- num_sim * month
simulated_monthly_Revenue <- c()
simulated_monthly_net_cash <- matrix(0, nrow = num_sim, ncol = month)
cumMonthlyProfitMatrix <- matrix(0, nrow = num_sim, ncol = month)
for (i in  1:num_sim){
  for(t in 1:month){
    monthlyCost = rnorm(1, mean = df["D", "Monthly_Operating_Cost_mean"], 
                        sd = df["D", "Monthly_Operating_Cost_std"])
    
    footTraffic = rpois(1, lambda = df["D", "Monthly_Foot_Traffic_mean"])
    
    # convert mean of average spend per csutomer to log mean
    avgSpendMean <- logMean(df["D", "Average_Spend_per_Customer_mean"], df["D", "Average_Spend_per_Customer_std"])
    avgSpendSd <- logSd(df["D", "Average_Spend_per_Customer_mean"], df["D", "Average_Spend_per_Customer_std"])
    avgSpend = rlnorm(1, meanlog = avgSpendMean, 
                      sdlog = avgSpendSd)
    # Project Cost 
    initialInvestment = rtriangle(1, a = df["D", "Initial_Investment_min"], 
                                  b = df["D", "Initial_Investment_max"], 
                                  c = df["D", "Initial_Investment_most_likely"])
    
    monthlyRev <- monthlyRevenue(footTraffic, avgSpend)
    simulated_monthly_Revenue <- c(simulated_monthly_Revenue, monthlyRev)
    
    monthlyNetCashVa <- monthlyNetCashVal(monthlyRev, monthlyCost)
    simulated_monthly_net_cash[i,t] <- monthlyNetCashVa
    
    cumMonthlyProfit <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
    #cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
    
  }
  cumMonthlyProfitMatrix[i, ] <- (cumsum(simulated_monthly_net_cash[i, ]) - initialInvestment)
}

cumMonthlyProfitMatrix[1, ]
cumsum(simulated_monthly_net_cash[1, ]) - initialInvestment
# Not sure why these aren't equal

colMeans(cumMonthlyProfitMatrix)
# The expected pay of period when breaking down cumulative profit by month
# using 1000 simulations is month 6.

